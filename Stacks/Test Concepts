MCQ

1. Following is C like pseudo code of a function that takes a number as an argument, and uses a stack S to do processing.
void fun(int n)
{
    Stack S;
    while (n > 0)
    {
      push(&S, n%2);
      n = n/2;
    }
    while (!isEmpty(&S))
      printf("%d ", pop(&S));
}
What does the above function do in general?
(A) Prints binary representation of n in reverse order
(B) Prints binary representation of n
(C) Prints the value of Logn
(D) Prints the value of Logn in reverse order


2. Which one of the following is an application of Stack Data Structure?
(A) Managing function calls
(B) The stock span problem
(C) Arithmetic expression evaluation
(D) All of the above


3. Which of the following is true about linked list implementation of stack?
(A) In push operation, if new nodes are inserted at the beginning of linked list, then in pop operation, nodes must be removed from end.
(B) In push operation, if new nodes are inserted at the end, then in pop operation, nodes must be removed from the beginning.
(C) Both of the above
(D) None of the above


4. Consider the following pseudo-code that uses a stack
declare a stack of characters
while ( there are more characters in the word to read )
{
   read a character
   push the character on the stack
}
while ( the stack is not empty )
{
   pop a character off the stack
   write the character to the screen
}
What is output for input “quiz”?
(A) quizquiz
(B) ziuq
(C) quiz
(D) ziuqziuq


5. Following is an incorrect pseudocode for the algorithm which is supposed to determine whether a sequence of parentheses is balanced:
declare a character stack
while ( more input is available)
{
   read a character
   if ( the character is a '(' )
      push it on the stack
   else if ( the character is a ')' and the stack is not empty )
      pop a character off the stack
   else
      print "unbalanced" and exit
 }
 print "balanced"
	}
Which of these unbalanced sequences does the above code think is balanced?
(A) ((())
(B) ())(()
(C) (()()))
(D) (()))()


6. The following postfix expression with single digit operands is evaluated using a stack:
8 2 3 ^ / 2 3 * + 5 1 * -
Note that ^ is the exponentiation operator. The top two elements of the stack after the first * is evaluated are:
(A) 6, 1
(B) 5, 7
(C) 3, 2
(D) 1, 5


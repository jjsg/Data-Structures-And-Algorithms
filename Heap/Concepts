1. Binary heap

It’s a binary tree with following properties
- It is complete binary tree. As a result we can store it in an array
Y?
Bcoz its complete binary tree
- Binary heap can be either Min/Max Heap. Root node must be minimum among all keys present in binary heap. Same property must be true for all nodes in tree. Max binary heap is opposite of Min

Applications:-
- Heap sort uses binary heap to sort array in O(nlogn)
- Priority Queue can be efficiently implemented using binary heap. Since it performs all basic operations in O(logn)

Operations on Min Heap:-
- getMini()
- extractMini()
- decreaseKey()
- insert()
- delete()


#include<iostream>
#include<climits>
using namespace std;
 
void swap(int *x, int *y);
 
class MinHeap
{
    int *harr,capacity, heap_size;
public:
    MinHeap(int capacity);
    void MinHeapify(int );
    int parent(int i) { return (i-1)/2; }
    int left(int i) { return (2*i + 1); }
    int right(int i) { return (2*i + 2); }
 
    int extractMin();
    void decreaseKey(int i, int new_val);
    int getMin() { return harr[0]; }
    void deleteKey(int i);
    void insertKey(int k);
};
 
MinHeap::MinHeap(int cap)
{
    heap_size = 0;
    capacity = cap;
    harr = new int[cap];
}
 
void MinHeap::insertKey(int k)
{
    if (heap_size == capacity)
    {   cout << "\nOverflow: Could not insertKey\n";
        return;
    }
    heap_size++;
    int i = heap_size - 1;
    harr[i] = k;
    while (i != 0 && harr[parent(i)] > harr[i])
    {
       swap(&harr[i], &harr[parent(i)]);
       i = parent(i);
    }
}
 
void MinHeap::decreaseKey(int i, int new_val)
{
    harr[i] = new_val;
    while (i != 0 && harr[parent(i)] > harr[i])
    {
       swap(&harr[i], &harr[parent(i)]);
       i = parent(i);
    }
}
int MinHeap::extractMin()
{
    if (heap_size <= 0) return INT_MAX;
    if (heap_size == 1)
    {
        heap_size--;
        return harr[0];
    }
    int root = harr[0];
    harr[0] = harr[heap_size-1];
    heap_size--;
    MinHeapify(0);
    return root;
}
 
void MinHeap::deleteKey(int i)
{
    decreaseKey(i, INT_MIN); 
    extractMin();  
}
 
void MinHeap::MinHeapify(int i)
{
    int l = left(i);
    int r = right(i);
    int smallest = i;
    if (l < heap_size && harr[l] < harr[i])
        smallest = l;
    if (r < heap_size && harr[r] < harr[smallest])
        smallest = r;
    if (smallest != i)
    {
        swap(&harr[i], &harr[smallest]);
        MinHeapify(smallest);
    }
}
 
void swap(int *x, int *y)
{
    int temp = *x;
    *x = *y;
    *y = temp;
}
 
int main()
{
    MinHeap h(11);
    h.insertKey(3);
    h.insertKey(2);
    h.deleteKey(1);
    h.insertKey(15);
    h.insertKey(5);
    h.insertKey(4);
    h.insertKey(45);
    cout << h.extractMin() << " ";
    cout << h.getMin() << " ";
    h.decreaseKey(2, 1);
    cout << h.getMin();
    return 0;
}



2. BST vs Binary Heap


A typical “priority queue” requires following operations to be efficient:
- Get top priority element
- insert element
- remove top priority element
- decrease key


A Binary Heap supports above operations with following time complexities:
	- O(1)
	- O(Logn)
	- O(Logn)
	- O(Logn)

A Self Balancing Binary Search Tree like AVL Tree, Red-Black Tree, etc can also support above operations with same time complexities.
	1. Finding minimum and maximum are not naturally O(1), but can be easily implemented in O(1) by keeping an extra pointer to minimum or maximum and updating the pointer with insertion and deletion if required. With deletion we can update by finding inorder predecessor or successor.
	2. Inserting an element is naturally O(Logn)
	3. Removing maximum or minimum are also O(Logn)
	4. Decrease key can be done in O(Logn) by doing a deletion followed by insertion. See this for details.


So why is Binary Heap Preferred for Priority Queue?
	* Since Binary Heap is implemented using arrays, there is always better locality of reference and operations are more cache friendly.
	* Although operations are of same time complexity, constants in Binary Search Tree are higher.
	* We can build a Binary Heap in O(n) time. Self Balancing BSTs require O(nLogn) time to construct.
	* Binary Heap doesn’t require extra space for pointers.
	* Binary Heap is easier to implement.
	* There are variations of Binary Heap like Fibonacci Heap that can support insert and decrease-key in Θ(1) time
	

Is Binary Heap always better?
	* Although Binary Heap is for Priority Queue, BSTs have their own advantages and the list of advantages is in-fact bigger compared to binary heap.
	* Searching an element in self-balancing BST is O(Logn) which is O(n) in Binary Heap.
	* We can print all elements of BST in sorted order in O(n) time, but Binary Heap requires O(nLogn) time.
	* Floor and ceil can be found in O(Logn) time.
	* Kth largest/smallest element be found in O(Logn) time by augmenting tree with an additional field



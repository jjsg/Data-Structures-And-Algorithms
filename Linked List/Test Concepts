MCQ

1. What does the following function do for a given Linked List with first node as head?
	void fun1(struct node* head)
	{
	  if(head == NULL)
	    return;
	   
	  fun1(head->next);
	  printf("%d  ", head->data);
	}

A. Print all nodes of list
B. Print all nodes of list in reverse
C. Print alternate nodes of list
D. Print alternate nodes of list in reverse


Ans: B


2. Which of the following points is/are true about Linked List data structure when it is compared with array

A. Arrays have better cache locality that can make them better in terms of performance 
B. It is easy to insert and delete elements in Linked List
C. Random access is not allowed in a typical implementation of Linked Lists
D. The size of array has to be pre-decided, linked lists can change their size any time
E. All of above


Ans:  E


3. Consider the following function that takes reference to head of a Doubly Linked List as parameter.   Assume that a node of doubly linked list has previous pointer as prev and next pointer as next.

	void fun(struct node **head_ref)
	{
	    struct node *temp = NULL;
	    struct node *current = *head_ref;
	 
	    while (current !=  NULL)
	    {
		temp = current->prev;
		current->prev = current->next;
		current->next = temp;
		current = current->prev;
	    }
 
	    if(temp != NULL )
		*head_ref = temp->prev;
	}
Assume that reference of head of following doubly linked list is passed to above function 1 <--> 2 <--> 3 <--> 4 <--> 5 <-->6. What should be the modified linked list after the function call?

A. 2 <--> 1 <--> 4 <--> 3 <--> 6 <-->5.
B. 5 <--> 4 <--> 3 <--> 2 <--> 1 <-->6.
C. 6 <--> 5 <--> 4 <--> 3 <--> 2 <--> 1.
D. 6 <--> 5 <--> 4 <--> 3 <--> 1 <--> 2


Ans: C


4. Which of the following sorting algorithms can be used to sort a random linked list with minimum time complexity?
A. Insertion Sort
B. Quick Sort
C. Heap Sort
D. Merge Sort


Ans: D


5. The following function reverse() is supposed to reverse a singly linked list. There is one line missing at the end of the function.
	/* Link list node */
	struct node
	{
	    int data;
	    struct node* next;
	};
	 
	/* head_ref is a double pointer which points to head (or start) pointer
	  of linked list */
	static void reverse(struct node** head_ref)
	{
	    struct node* prev   = NULL;
	    struct node* current = *head_ref;
	    struct node* next;
	    while (current != NULL)
	    {
		next  = current->next; 
		current->next = prev;  
		prev = current;
		current = next;
	    }
	    /*ADD A STATEMENT HERE*/
	}
What should be added in place of “/*ADD A STATEMENT HERE*/”, so that the function correctly reverses a linked list.
A. *head_ref = prev;
B. *head_ref = current;
C. *head_ref = next;
D. *head_ref = NULL;


Ans: A


6. What is the output of following function for start pointing to first node of following linked list? 1->2->3->4->5->6
	void fun(struct node* start)
	{
	  if(start == NULL)
	    return;
	  printf("%d  ", start->data);
	  
	  if(start->next != NULL )
	    fun(start->next->next);
	  printf("%d  ", start->data);
	}

A. 1 4 6 6 4 1
B. 1 3 5 1 3 5
C. 1 2 3 5
D. 1 3 5 5 3 1


Ans: D


7. The following C function takes a simply-linked list as input argument. It modifies thelist by moving the last element to the front of the list and returns the modified list. Some part of the code is left blank. Choose the correct alternative to replace the blank line.
	typedef struct node
	{
	  int value;
	  struct node *next;
	}Node;
	  
	Node *move_to_front(Node *head)
	{
	  Node *p, *q;
	  if ((head == NULL: || (head->next == NULL))
	    return head;
	  q = NULL; p = head;
	  while (p-> next !=NULL)
	  {
	    q = p;
	    p = p->next;
	  }
	  _______________________________
	  return head;
	}

A. q = NULL; p->next = head; head = p;
B. q->next = NULL; head = p; p->next = head;
C. head = p; p->next = q; q->next = NULL;
D. q->next = NULL; p->next = head; head = p;


Ans: D


8. The following C function takes a single-linked list of integers as a parameter and rearranges the elements of the list. The function is called with the list containing the integers 1, 2, 3, 4, 5, 6, 7 in the given order. What will be the contents of the list after the function completes execution?
	struct node
	{
	  int value;
	  struct node *next;
	};
	void rearrange(struct node *list)
	{
	  struct node *p, * q;
	  int temp;
	  if ((!list) || !list->next)
	      return;
	  p = list;
	  q = list->next;
	  while(q)
	  {
	     temp = p->value;
	     p->value = q->value;
	     q->value = temp;
	     p = q->next;
	     q = p?p->next:0;
	  }
	}
A. 1,2,3,4,5,6,7
B. 2,1,4,3,6,5,7
C. 1,3,2,5,4,7,6
D. 2,3,4,5,6,7,1


Ans: B


9. In the worst case, the number of comparisons needed to search a singly linked list of length n for a given element is

A. log (2n)
B. n/2
C. log (2n – 1)
D. n 


Ans: D

